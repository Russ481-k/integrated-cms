---
globs: *.java,*.ts,*.tsx
description: v2 보안 시스템 구현 가이드 (하이브리드 계층 구조)
---

# v2 보안 시스템 구현 가이드

## 🛡️ 하이브리드 보안 계층 구조

### 3계층 보안 전략

1. **SecurityConfig**: 기본 보안 정책 + 큰 도메인 분류
2. **커스텀 어노테이션**: 공통 비즈니스 권한 로직
3. **컨트롤러**: 세밀한 메서드별 제어

## 🔧 백엔드 보안 구현

### 1. 통합 보안 설정 (UnifiedCmsSecurityConfig)

**Spring Security 6.x Lambda DSL 사용 필수**

- `.cors(cors -> cors.configurationSource())` 형태 사용
- `.authorizeHttpRequests(authz -> authz...)` 패턴 적용

**URL 패턴별 기본 권한**:

- `/api/v2/integrated-cms/**`: SUPER_ADMIN, SERVICE_ADMIN
- `/api/v2/cms/**`: SUPER_ADMIN, SERVICE_ADMIN, SITE_ADMIN, ADMIN
- `/api/v2/auth/**`: 공개 접근 (permitAll)

### 2. 커스텀 보안 어노테이션

**@RequireIntegratedCmsAccess**: 통합 CMS 접근 권한

- SUPER_ADMIN, SERVICE_ADMIN 역할 필요
- ServiceContextHolder의 "integrated_cms" 컨텍스트 확인

**@RequireServiceAccess("#serviceId")**: 서비스별 접근 권한

- PathVariable serviceId 기반 권한 검증
- 사용자의 서비스 할당 여부 확인

**@RequireContentPermission**: 콘텐츠별 세부 권한

- serviceId, contentType, action 기반 검증
- 읽기/쓰기/삭제 권한 세분화

### 3. 권한 검증 서비스

**ServiceAccessChecker**: 서비스 접근 권한 검증

- SUPER_ADMIN: 모든 서비스 접근 가능
- 기타 역할: 할당된 서비스만 접근 (추후 구현)

**IntegratedCmsAccessChecker**: 통합 CMS 접근 검증

- ServiceContext가 "integrated_cms"인지 확인
- 사용자 역할이 SUPER_ADMIN/SERVICE_ADMIN인지 검증

**ContentPermissionChecker**: 콘텐츠별 권한 검증

- 액션별 권한 확인 (read/write/delete)
- 작성자 본인 확인 로직 (추후 구현)
- SUPER_ADMIN은 모든 권한 보유

## 🔐 역할 기반 접근 제어 (RBAC)

### 권한 계층 구조

- **SUPER_ADMIN**: 시스템 전체 관리 (모든 DB 접근)
- **SERVICE_ADMIN**: 특정 서비스 전체 관리
- **SITE_ADMIN**: 특정 사이트 관리 (삭제 권한 포함)
- **ADMIN**: 일반 관리자 (삭제 권한 제외)
- **USER**: 일반 사용자
- **GUEST**: 게스트

### 데이터베이스 접근 권한

- **integrated.admin 계정**: SUPER_ADMIN, SERVICE_ADMIN 사용
- **admin 계정**: SITE_ADMIN, ADMIN 사용

## 🌐 프론트엔드 보안 구현

### 1. Recoil 기반 인증 상태 관리

**authState 아톰**: 사용자 정보, 인증 상태, 권한 배열 관리
**useAuthActions 훅**: login, logout, syncAuthState 제공

### 2. 권한 기반 UI 렌더링

**조건부 컴포넌트 렌더링**:

- `user.role === 'SUPER_ADMIN'`: 모든 UI 요소 표시
- 역할별 메뉴 항목 필터링
- 버튼/링크 비활성화 처리

**Route Guard**:

- AuthGuard 컴포넌트로 페이지 접근 제어
- 권한 없는 경우 403 페이지 또는 리다이렉트

### 3. API 호출 시 권한 확인

**요청 전 검증**: 클라이언트에서 기본 권한 확인
**서버 응답 처리**: 403 에러 시 적절한 UI 피드백
**토큰 만료 처리**: 401 에러 시 자동 로그아웃

## 🚨 보안 모범 사례

### 1. 입력 검증 및 sanitization

- 모든 사용자 입력에 대한 서버사이드 검증
- XSS 방지를 위한 HTML 이스케이프
- SQL Injection 방지를 위한 파라미터 바인딩

### 2. 세션 및 토큰 관리

- JWT 토큰 적절한 만료 시간 설정
- Refresh Token 로테이션 구현
- 로그아웃 시 토큰 블랙리스트 처리

### 3. 감사 로깅 (Audit Logging)

- 모든 권한 검증 시도 기록
- 인증 실패, 권한 위반 이벤트 로깅
- 민감한 데이터 접근 기록

### 4. 에러 처리 보안

- 상세한 에러 정보 노출 방지
- 공격자에게 유용한 정보 제공 차단
- 일관된 에러 응답 형식 사용

## 🧪 보안 테스트 전략

### 1. 단위 테스트

- 권한 검증 로직 테스트
- 커스텀 어노테이션 동작 검증
- 서비스별 접근 권한 테스트

### 2. 통합 테스트

- API 엔드포인트별 권한 테스트
- 서로 다른 역할의 사용자 시나리오 테스트
- 토큰 만료 및 갱신 플로우 테스트

### 3. 보안 테스트

- 권한 우회 시도 테스트
- 토큰 조작 테스트
- 크로스 서비스 접근 시도 테스트

## 📋 보안 체크리스트

### 개발 시 확인사항

- [ ] 모든 API 엔드포인트에 적절한 권한 설정
- [ ] 커스텀 어노테이션 올바른 사용
- [ ] 민감한 데이터 로깅 방지
- [ ] 에러 메시지에 민감 정보 포함 방지

### 배포 전 확인사항

- [ ] 기본 관리자 계정 패스워드 변경
- [ ] JWT 시크릿 키 적절히 설정
- [ ] HTTPS 연결 강제
- [ ] 보안 헤더 설정 (CORS, CSP 등)

### 운영 중 모니터링

- [ ] 권한 위반 시도 모니터링
- [ ] 비정상적인 API 호출 패턴 감지
- [ ] 토큰 남용 패턴 감지
- [ ] 정기적인 보안 감사 수행
