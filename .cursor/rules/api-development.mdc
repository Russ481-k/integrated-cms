---
globs: *.java,*.ts,*.tsx
description: API 개발 가이드라인 및 REST API 설계 원칙
---

# API 개발 가이드라인

## 🌐 API 설계 원칙

### RESTful 설계
- **HTTP 메서드**: GET (조회), POST (생성), PUT (전체 수정), PATCH (부분 수정), DELETE (삭제)
- **상태 코드**: 200 (성공), 201 (생성), 400 (잘못된 요청), 401 (인증 실패), 403 (권한 없음), 404 (없음), 500 (서버 오류)
- **리소스 중심**: 명사 기반 URL 설계

### API 계층 구조
```
/api/
├── unified/           # 통합 관리 API
│   ├── auth/         # 인증/인가
│   ├── services/     # 서비스 관리
│   ├── content/      # 통합 콘텐츠 관리
│   ├── admins/       # 관리자 계정 관리
│   └── system/       # 시스템 관리
├── {serviceCode}/    # 서비스별 API (동적)
└── health/           # 헬스체크
```

## 🔐 인증 및 권한

### JWT 토큰 구조
```json
{
  "sub": "admin-uuid",
  "iat": 1234567890,
  "exp": 1234568790,
  "permissions": ["SERVICE_MANAGE", "CONTENT_READ"],
  "services": [1, 2, 3],
  "role": "UNIFIED_ADMIN"
}
```

### 권한 검증 어노테이션
```java
// 서비스 관리 권한 확인
@PreAuthorize("hasPermission(#serviceId, 'SERVICE', 'MANAGE')")
@PutMapping("/api/unified/services/{serviceId}")

// 메뉴 접근 권한 확인
@PreAuthorize("hasMenuPermission(#menuId, 'ACCESS')")
@GetMapping("/api/unified/menus/{menuId}")

// 그룹 멤버십 확인
@PreAuthorize("isGroupMember(#groupId) or hasRole('SUPER_ADMIN')")
@PostMapping("/api/unified/groups/{groupId}/members")
```

## 📝 API 응답 형식

### 표준 응답 구조
```typescript
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
  pagination?: {
    page: number;
    size: number;
    total: number;
    totalPages: number;
  };
  timestamp: string;
}
```

### 에러 응답 예시
```json
{
  "success": false,
  "error": {
    "code": "PERMISSION_DENIED",
    "message": "해당 서비스에 대한 권한이 없습니다.",
    "details": {
      "serviceId": 1,
      "requiredPermission": "SERVICE_MANAGE"
    }
  },
  "timestamp": "2024-03-25T10:30:00Z"
}
```

## 🚀 성능 최적화

### 페이지네이션
```java
@GetMapping("/api/unified/content")
public ResponseEntity<ApiResponse<Page<UnifiedContent>>> getContent(
    @RequestParam(defaultValue = "0") int page,
    @RequestParam(defaultValue = "20") int size,
    @RequestParam(required = false) Long serviceId
) {
    // 구현
}
```

### 캐싱 전략
```java
@Cacheable(value = "permissions", key = "#adminId + '_' + #serviceId")
public List<Permission> getUserPermissions(String adminId, Long serviceId) {
    // 권한 조회 로직
}
```

### 일괄 처리 API
```java
@PostMapping("/api/unified/content/bulk")
public ResponseEntity<?> bulkUpdateContent(
    @RequestBody BulkUpdateRequest request
) {
    // action: "publish", "delete", "move", "sync"
    // ids: [1, 2, 3, 4, 5]
    // targetServiceId: 2 (이동 시)
}
```

## 🔄 동기화 API

### 서비스 간 콘텐츠 동기화
```java
@PostMapping("/api/unified/content/{contentId}/sync")
public ResponseEntity<?> syncContent(
    @PathVariable Long contentId,
    @RequestParam List<Long> targetServiceIds
) {
    // 비동기 동기화 작업 시작
    return ResponseEntity.accepted().build();
}

@GetMapping("/api/unified/content/{contentId}/sync/status")
public ResponseEntity<SyncStatus> getSyncStatus(@PathVariable Long contentId) {
    // 동기화 상태 조회
}
```

## 📊 모니터링 및 로깅

### 활동 로그 기록
```java
@PostMapping("/api/unified/services")
@LogActivity(action = "SERVICE_CREATE", target = "SERVICE")
public ResponseEntity<?> createService(@RequestBody ServiceRequest request) {
    // 서비스 생성 로직
    // 자동으로 UNIFIED_ACTIVITY_LOG에 기록
}
```

### 헬스체크 엔드포인트
```java
@GetMapping("/api/health")
public ResponseEntity<HealthStatus> healthCheck() {
    return ResponseEntity.ok(HealthStatus.builder()
        .status("UP")
        .database("UP")
        .redis("UP")
        .services(serviceHealthChecker.checkAllServices())
        .build());
}
```

자세한 API 명세는 [04-unified-cms-api-specification.md](mdc:.cursor/docs/v2/04-unified-cms-api-specification.md)를 참조하세요.