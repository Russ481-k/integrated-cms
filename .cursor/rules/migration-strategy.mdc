---
description: 기존 CMS에서 통합 CMS로의 마이그레이션 전략
---

# 마이그레이션 전략 가이드

## 🔄 Strangler Fig 패턴

기존 CMS 시스템을 점진적으로 통합 CMS로 전환하는 전략입니다.

### 마이그레이션 단계

#### Phase 1: 기반 구축 (4주)
- ✅ 통합 메타 데이터베이스 구축
- ✅ API Gateway 구현  
- ✅ 기본 통합 API 구현
- ✅ 인증/인가 시스템 구축

#### Phase 2: 통합 관리 기능 (6주)
- 🔄 통합 프론트엔드 구현
- 🔄 통합 컨텐츠 관리
- 🔄 권한 관리 시스템
- 🔄 서비스 등록/관리

#### Phase 3: 고도화 기능 (4주)
- 📋 실시간 동기화
- 📋 고급 모니터링
- 📋 성능 최적화
- 📋 보안 강화

## 🗄️ 데이터 마이그레이션

### 기존 테이블 확장 전략

기존 `bbs_article` 테이블에 통합 관리용 필드만 추가:

```sql
-- 기존 테이블 확장 (무중단)
ALTER TABLE bbs_article 
    ADD COLUMN UNIFIED_SYNC_FLAG BOOLEAN DEFAULT FALSE,
    ADD COLUMN UNIFIED_CONTENT_ID int(10) unsigned NULL,
    ADD COLUMN UNIFIED_LAST_SYNC TIMESTAMP NULL,
    ADD COLUMN ORGANIZATION_ID VARCHAR(36),
    ADD INDEX idx_unified_sync (UNIFIED_SYNC_FLAG, UNIFIED_CONTENT_ID);
```

### 점진적 데이터 동기화

```java
@Scheduled(fixedDelay = 30000) // 30초마다 실행
public void syncPendingContent() {
    List<Article> pendingArticles = articleRepository
        .findByUnifiedSyncFlagFalse(PageRequest.of(0, 100));
    
    for (Article article : pendingArticles) {
        try {
            UnifiedContent unifiedContent = createUnifiedContent(article);
            unifiedContentRepository.save(unifiedContent);
            
            article.setUnifiedSyncFlag(true);
            article.setUnifiedContentId(unifiedContent.getContentId());
            articleRepository.save(article);
            
        } catch (Exception e) {
            log.error("동기화 실패: articleId={}", article.getNttId(), e);
        }
    }
}
```

## 🔀 라우팅 전환

### API Gateway를 통한 점진적 전환

```yaml
# Gateway 라우팅 설정
spring:
  cloud:
    gateway:
      routes:
        # 통합 관리 API (신규)
        - id: unified-api
          uri: http://unified-service:8080
          predicates:
            - Path=/api/unified/**
          
        # 기존 서비스 API (기존)
        - id: legacy-service1
          uri: http://service1:8080
          predicates:
            - Path=/api/service1/**
          
        # 점진적 전환 (Feature Toggle)
        - id: migrating-service2
          uri: http://unified-service:8080
          predicates:
            - Path=/api/service2/**
            - Header=X-Use-Unified, true
          
        - id: legacy-service2
          uri: http://service2:8080
          predicates:
            - Path=/api/service2/**
```

## 🛡️ 롤백 계획

### 데이터베이스 롤백

```sql
-- 통합 관리 필드 제거 (필요 시)
ALTER TABLE bbs_article 
    DROP COLUMN UNIFIED_SYNC_FLAG,
    DROP COLUMN UNIFIED_CONTENT_ID,
    DROP COLUMN UNIFIED_LAST_SYNC,
    DROP INDEX idx_unified_sync;
```

### 서비스 롤백

```bash
# Docker Compose를 통한 빠른 롤백
docker-compose -f docker-compose.legacy.yml up -d

# 또는 Feature Toggle를 통한 즉시 롤백
curl -X POST http://gateway:8080/admin/toggle/unified-cms/disable
```

## 📊 마이그레이션 모니터링

### 주요 메트릭

- **동기화 성공률**: `sync_success_rate`
- **API 응답시간**: `api_response_time`  
- **데이터 일관성**: `data_consistency_check`
- **사용자 활동**: `user_activity_comparison`

### 알림 설정

```yaml
# Prometheus Alert Rules
groups:
  - name: migration.rules
    rules:
      - alert: SyncFailureRate
        expr: sync_failure_rate > 0.1
        for: 5m
        annotations:
          summary: "동기화 실패율이 10%를 초과했습니다"
          
      - alert: DataInconsistency
        expr: data_consistency_score < 0.95
        for: 2m
        annotations:
          summary: "데이터 일관성 문제가 감지되었습니다"
```

## 🔧 호환성 보장

### API 버전 관리

```java
@RestController
@RequestMapping("/api/v1/content")
public class LegacyContentController {
    
    // 기존 API 호환성 유지
    @GetMapping("/articles")
    public List<ArticleDto> getArticles() {
        // 통합 시스템에서 데이터 조회 후 기존 형식으로 변환
        return unifiedContentService.getArticlesInLegacyFormat();
    }
}
```

### 프론트엔드 점진적 전환

```tsx
// Feature Flag를 통한 점진적 UI 전환
function BoardManagement() {
  const { isUnifiedMode } = useFeatureFlag('unified-board');
  
  if (isUnifiedMode) {
    return <UnifiedBoardManagement />;
  }
  
  return <LegacyBoardManagement />;
}
```

자세한 마이그레이션 가이드는 [09-unified-cms-migration-guide.md](mdc:.cursor/docs/v2/09-unified-cms-migration-guide.md)를 참조하세요.