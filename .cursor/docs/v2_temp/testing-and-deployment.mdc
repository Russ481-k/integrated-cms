---
globs: *.test.ts,*.test.tsx,*.test.java,*.yml,*.yaml,Dockerfile,docker-compose*.yml
description: 테스팅 전략 및 배포 가이드라인
---

# 테스팅 및 배포 가이드라인

## 🧪 테스팅 전략

### 테스트 피라미드
1. **단위 테스트 (70%)**: 개별 함수/메서드 테스트
2. **통합 테스트 (20%)**: 컴포넌트 간 상호작용 테스트  
3. **E2E 테스트 (10%)**: 전체 사용자 시나리오 테스트

### 백엔드 테스트

#### 단위 테스트 (JUnit 5)
```java
@ExtendWith(MockitoExtension.class)
class PermissionServiceTest {
    
    @Mock
    private PermissionRepository permissionRepository;
    
    @InjectMocks
    private PermissionService permissionService;
    
    @Test
    void shouldGrantPermissionWhenUserIsGroupMember() {
        // given, when, then
    }
}
```

#### 통합 테스트 (TestContainers)
```java
@SpringBootTest
@Testcontainers
class UnifiedContentControllerIntegrationTest {
    
    @Container
    static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.0");
    
    @Test
    void shouldCreateUnifiedContent() {
        // 실제 DB와 연동된 통합 테스트
    }
}
```

### 프론트엔드 테스트

#### 컴포넌트 테스트 (Jest + Testing Library)
```tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ServiceCard } from './ServiceCard';

describe('ServiceCard', () => {
  it('should display service information correctly', () => {
    const mockService = {
      serviceId: 1,
      serviceName: 'Test Service',
      status: 'ACTIVE'
    };
    
    render(<ServiceCard service={mockService} />);
    expect(screen.getByText('Test Service')).toBeInTheDocument();
  });
});
```

#### E2E 테스트 (Playwright)
```typescript
import { test, expect } from '@playwright/test';

test('unified admin login and service management', async ({ page }) => {
  await page.goto('/login');
  await page.fill('[data-testid=username]', 'admin@test.com');
  await page.fill('[data-testid=password]', 'password');
  await page.click('[data-testid=login-button]');
  
  await expect(page.locator('[data-testid=service-list]')).toBeVisible();
});
```

## 🚀 배포 전략

### Docker 컨테이너화

#### 백엔드 Dockerfile
```dockerfile
FROM openjdk:17-jdk-slim
COPY target/unified-cms-api.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "/app.jar"]
```

#### 프론트엔드 Dockerfile
```dockerfile
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS runner
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

### Docker Compose 개발 환경

```yaml
version: "3.8"
services:
  unified-api:
    build: ./server
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_HOST=unified-db
    depends_on:
      - unified-db
      - redis

  unified-frontend:
    build: ./client
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    depends_on:
      - unified-api

  unified-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: unified_cms
    ports:
      - "3306:3306"
    volumes:
      - unified_db_data:/var/lib/mysql

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
```

### CI/CD 파이프라인 (GitHub Actions)

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          
      - name: Run backend tests
        run: ./mvnw test
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Run frontend tests
        run: |
          npm ci
          npm run test
          npm run build

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        run: |
          docker-compose -f docker-compose.prod.yml up -d
```

## 📊 모니터링 및 로깅

### 애플리케이션 메트릭
- **Micrometer + Prometheus**: 성능 메트릭 수집
- **Grafana**: 대시보드 시각화
- **ELK Stack**: 로그 수집 및 분석

### 헬스체크 설정
```yaml
# docker-compose.yml
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
  interval: 30s
  timeout: 10s
  retries: 3
```

자세한 테스팅 전략은 [10-unified-cms-testing-performance.md](mdc:.cursor/docs/v2/10-unified-cms-testing-performance.md)를,
배포 가이드는 [08-unified-cms-deployment-guide.md](mdc:.cursor/docs/v2/08-unified-cms-deployment-guide.md)를 참조하세요.