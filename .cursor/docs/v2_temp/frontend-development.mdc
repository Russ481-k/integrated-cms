---
globs: *.tsx,*.ts,*.jsx,*.js,*.css,*.scss
description: 프론트엔드 개발 가이드라인 및 컴포넌트 구조
---

# 프론트엔드 개발 가이드라인

## 🛠️ 기술 스택

### Core Framework
- **Next.js 14** (App Router) + React 18
- **TypeScript 5** + 엄격한 타입 검사
- **Chakra UI** + Framer Motion
- **TanStack Query** + Zustand

### 상태 관리
- **서버 상태**: TanStack Query (React Query)
- **클라이언트 전역 상태**: Zustand
- **폼 상태**: React Hook Form + Zod 검증

## 📁 컴포넌트 구조

```
src/
├── app/                          # Next.js App Router
│   ├── (auth)/                   # 인증 관련 페이지
│   ├── main/                     # 메인 페이지
│   ├── services/                 # 서비스 관리
│   ├── content/                  # 콘텐츠 관리
│   ├── admin/                    # 관리자/권한
│   └── system/                   # 시스템 관리
├── components/
│   ├── ui/                       # 기본 UI 컴포넌트
│   ├── common/                   # 공통 컴포넌트
│   ├── layout/                   # 레이아웃 컴포넌트
│   └── [feature]/                # 기능별 컴포넌트
├── lib/
│   ├── api/                      # API 클라이언트
│   ├── hooks/                    # 커스텀 훅
│   ├── stores/                   # Zustand 스토어
│   └── utils/                    # 유틸리티 함수
└── types/                        # TypeScript 타입 정의
```

## 🎨 컴포넌트 설계 원칙

### 서비스 선택 패턴
모든 통합 관리 페이지는 서비스 선택 기능을 포함:
```tsx
interface ServiceSelectStore {
  selectedService: number | null;
  servicePermissions: Record<number, string[]>;
  setSelectedService: (serviceId: number | null) => void;
  clearSelection: () => void;
}
```

### 권한 기반 렌더링
```tsx
function ProtectedComponent({ permission, children }: ProtectedComponentProps) {
  const { hasPermission } = usePermission();
  
  if (!hasPermission(permission)) {
    return <AccessDenied />;
  }
  
  return <>{children}</>;
}
```

### 통합 페이지 공통 구조
```tsx
interface UnifiedPageProps<T> {
  serviceId: number | null; // null인 경우 전체 서비스
  data: T[];
  isLoading: boolean;
  view: 'table' | 'grid' | 'list';
  actions: {
    onEdit?: (id: number) => void;
    onDelete?: (id: number) => void;
    onSync?: (id: number) => void;
  };
}
```

## 🔐 인증 및 권한

### API 호출 패턴
```tsx
const { data, error } = useQuery({
  queryKey: ['unified-content', serviceId],
  queryFn: () => unifiedApi.content.getList({ serviceId }),
  enabled: !!serviceId && hasPermission('CONTENT_READ'),
});
```

### 서비스 선택 훅
```tsx
const useServiceSelect = () => {
  const selectedService = useServiceStore(state => state.selectedService);
  const setSelectedService = useServiceStore(state => state.setSelectedService);
  
  return { selectedService, setSelectedService };
};
```

## 📱 반응형 디자인

- **모바일 우선**: `base` → `md` → `lg` → `xl`
- **Chakra UI 브레이크포인트** 활용
- **접근성**: WCAG 2.1 AA 수준 준수

자세한 컴포넌트 명세는 [05-unified-cms-frontend-specification.md](mdc:.cursor/docs/v2/05-unified-cms-frontend-specification.md)를 참조하세요.